{
  "string_like_types": [
    "std/string",
    "std/string_view",
    "roq/Account",
    "roq/CFICode",
    "roq/ClOrdId",
    "roq/Currency",
    "roq/Description",
    "roq/Exchange",
    "roq/ExternalAccount",
    "roq/ExternalOrderId",
    "roq/ExternalTradeId",
    "roq/Label",
    "roq/MatrixKey",
    "roq/MBOOrderId",
    "roq/MeasurementKey",
    "roq/OrderTemplate",
    "roq/ParameterKey",
    "roq/ParameterValue",
    "roq/RequestId",
    "roq/RoutingId",
    "roq/Source",
    "roq/String",
    "roq/Symbol",
    "roq/TimeZone",
    "roq/User",
    "roq/fix/ClOrdID",
    "roq/fix/ExpireTime",
    "roq/fix/OrderID",
    "roq/fix/PartyID",
    "roq/fix/QuoteEntryID",
    "roq/fix/QuoteSetID",
    "roq/fix/Text",
    "roq/fix/TradingSessionID"
  ],
  "default_comments": {
    "account": "Account name",
    "clientOrderId": "Client order identifier",
    "commissionCurrency": "Currency",
    "conditionalOnVersion": "Auto-reject if this version has positively failed (optional)",
    "createTimeUtc": "Created timestamp (UTC)",
    "currency": "Currency",
    "exchange": "Exchange",
    "exchangeSequence": "Exchange message sequence number",
    "exchangeTimeUtc": "Exchange timestamp, possibly from matching engine (UTC)",
    "executionInstructions": "Execution instructions",
    "externalAccount": "External account name",
    "externalOrderId": "External order identifier",
    "externalTradeId": "External trade identifier",
    "gatewayOrderId": "Order identifier",
    "gatewayTradeId": "Trade identifier",
    "marginMode": "Margin mode",
    "orderId": "Order identifier",
    "orderTemplate": "Order template",
    "orderType": "Order type",
    "positionEffect": "Position effect",
    "requestId": "Request identifier",
    "requestTemplate": "Request template (gateway configured)",
    "routingId": "Routing identifier",
    "sendingTimeUtc": "Exchange sending timestamp (UTC)",
    "settlementCurrency": "Currency",
    "snapshot": "Full update (possibly old) if true and otherwise an incremental update",
    "strategyId": "Strategy identifier (optional)",
    "streamId": "Stream identifier",
    "strikeCurrency": "Currency",
    "symbol": "Symbol",
    "timeInForce": "Time in force",
    "tradeId": "Trade identifier",
    "updateTimeUtc": "Updated timestamp (UTC)",
    "version": "Version number (strictly increasing, optional)"
  },
  "cpp": {
    "std/string_view": {
      "type": "std::string_view",
      "includes": [
        "<string_view>"
      ]
    },
    "std/string": {
      "type": "std::string",
      "includes": [
        "<string>"
      ]
    },
    "std/nanoseconds": {
      "type": "std::chrono::nanoseconds",
      "includes": [
        "<chrono>",
        "<fmt/chrono.h>"
      ],
      "default": "{}",
      "class": [
        "chrono"
      ]
    },
    "std/microseconds": {
      "type": "std::chrono::microseconds",
      "includes": [
        "<chrono>",
        "<fmt/chrono.h>"
      ],
      "default": "{}",
      "class": [
        "chrono"
      ]
    },
    "std/milliseconds": {
      "type": "std::chrono::milliseconds",
      "includes": [
        "<chrono>",
        "<fmt/chrono.h>"
      ],
      "default": "{}",
      "class": [
        "chrono"
      ]
    },
    "std/seconds": {
      "type": "std::chrono::seconds",
      "includes": [
        "<chrono>",
        "<fmt/chrono.h>"
      ],
      "default": "{}",
      "class": [
        "chrono"
      ]
    },
    "std/minutes": {
      "type": "std::chrono::minutes",
      "includes": [
        "<chrono>",
        "<fmt/chrono.h>"
      ],
      "default": "{}",
      "class": [
        "chrono"
      ]
    },
    "std/days": {
      "type": "std::chrono::days",
      "includes": [
        "<chrono>",
        "<fmt/chrono.h>"
      ],
      "default": "{}",
      "class": [
        "chrono"
      ]
    },
    "std/year_month_day": {
      "type": "std::chrono::year_month_day",
      "includes": [
        "<chrono>",
        "<fmt/chrono.h>",
        "roq/utils/chrono.hpp"
      ],
      "default": "{}",
      "class": [
        "chrono"
      ]
    },
    "std/hh_mm_ss": {
      "type": "std::chrono::hh_mm_ss<std::chrono::milliseconds>",
      "includes": [
        "<chrono>",
        "<fmt/chrono.h>"
      ],
      "default": "{}",
      "class": [
        "chrono"
      ]
    },
    "std/bool": {
      "type": "bool",
      "default": "false",
      "class": [
        "integral"
      ]
    },
    "std/char": {
      "type": "char",
      "default": "'\\0'",
      "class": [
        "integral"
      ]
    },
    "std/int8": {
      "type": "int8_t",
      "default": "{}",
      "class": [
        "integral",
        "signed"
      ]
    },
    "std/uint8": {
      "type": "uint8_t",
      "default": "{}",
      "class": [
        "integral",
        "unsigned"
      ]
    },
    "std/int16": {
      "type": "int16_t",
      "default": "{}",
      "class": [
        "integral",
        "signed"
      ]
    },
    "std/uint16": {
      "type": "uint16_t",
      "default": "{}",
      "class": [
        "integral",
        "unsigned"
      ]
    },
    "std/int32": {
      "type": "int32_t",
      "default": "{}",
      "class": [
        "integral",
        "signed"
      ]
    },
    "std/uint32": {
      "type": "uint32_t",
      "default": "{}",
      "class": [
        "integral",
        "unsigned"
      ]
    },
    "std/int64": {
      "type": "int64_t",
      "default": "{}",
      "class": [
        "integral",
        "signed"
      ]
    },
    "std/uint64": {
      "type": "uint64_t",
      "default": "{}",
      "class": [
        "integral",
        "unsigned"
      ]
    },
    "std/ssize_t": {
      "type": "ssize_t",
      "default": "{}",
      "class": [
        "integral",
        "signed"
      ]
    },
    "std/size_t": {
      "type": "size_t",
      "default": "{}",
      "class": [
        "integral",
        "unsigned"
      ]
    },
    "std/float": {
      "type": "float",
      "includes": [
        "<limits>"
      ],
      "default": "std::numeric_limits<float>::quiet_NaN()"
    },
    "std/double": {
      "type": "double",
      "includes": [
        "roq/limits.hpp"
      ],
      "default": "roq::NaN"
    },
    "std/span": {
      "type": "std::span",
      "includes": [
        "<span>",
        "<fmt/ranges.h>"
      ]
    },
    "std/vector": {
      "type": "std::vector",
      "includes": [
        "<vector>",
        "<fmt/ranges.h>"
      ]
    }
  },
  "java": {
    "std/string_view": {
      "type": "String"
    },
    "std/string": {
      "type": "String"
    },
    "std/nanoseconds": {
      "type": "long"
    },
    "std/microseconds": {
      "type": "long"
    },
    "std/milliseconds": {
      "type": "long"
    },
    "std/seconds": {
      "type": "long"
    },
    "std/days": {
      "type": "long"
    },
    "std/year_month_day": {
      "type": "long"
    },
    "std/hh_mm_ss": {
      "type": "long"
    },
    "std/bool": {
      "type": "boolean"
    },
    "std/char": {
      "type": "int"
    },
    "std/int8": {
      "type": "int"
    },
    "std/uint8": {
      "type": "int"
    },
    "std/int16": {
      "type": "int"
    },
    "std/uint16": {
      "type": "int"
    },
    "std/int32": {
      "type": "int"
    },
    "std/uint32": {
      "type": "long"
    },
    "std/int64": {
      "type": "long"
    },
    "std/uint64": {
      "type": "long"
    },
    "std/ssize_t": {
      "type": "long"
    },
    "std/size_t": {
      "type": "long"
    },
    "std/float": {
      "type": "float"
    },
    "std/double": {
      "type": "double"
    },
    "std/span": {
      "type": "[]"
    },
    "std/vector": {
      "type": "[]"
    },
    "roq/UUID": {
      "type": "java.util.UUID"
    }
  }
}

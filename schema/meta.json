{
  "string_like_types": [
    "std/string",
    "std/string_view",
    "roq/Account",
    "roq/ClOrdId",
    "roq/Currency",
    "roq/Description",
    "roq/Exchange",
    "roq/ExternalAccount",
    "roq/ExternalOrderId",
    "roq/ExternalTradeId",
    "roq/Label",
    "roq/MatrixKey",
    "roq/MatrixKey",
    "roq/MBOOrderId",
    "roq/MeasurementKey",
    "roq/OrderTemplate",
    "roq/ParameterKey",
    "roq/ParameterValue",
    "roq/RequestId",
    "roq/RoutingId",
    "roq/Source",
    "roq/String",
    "roq/Symbol",
    "roq/TimeZone",
    "roq/User"
  ],
  "default_comments": {
    "account": "Account name",
    "client_order_id": "Client order identifier",
    "commission_currency": "Currency",
    "conditional_on_version": "Auto-reject if this version has positively failed (optional)",
    "create_time_utc": "Created timestamp (UTC)",
    "currency": "Currency",
    "exchange": "Exchange",
    "exchange_sequence": "Exchange message sequence number",
    "exchange_time_utc": "Exchange timestamp, possibly from matching engine (UTC)",
    "execution_instructions": "Execution instructions",
    "external_account": "External account name",
    "external_order_id": "External order identifier",
    "external_trade_id": "External trade identifier",
    "gateway_order_id": "Order identifier",
    "gateway_trade_id": "Trade identifier",
    "margin_mode": "Margin mode",
    "order_id": "Order identifier",
    "order_template": "Order template",
    "order_type": "Order type",
    "position_effect": "Position effect",
    "request_id": "Request identifier",
    "request_template": "Request template (gateway configured)",
    "routing_id_2": "Routing identifier #2",
    "routing_id": "Routing identifier",
    "sending_time_utc": "Exchange sending timestamp (UTC)",
    "settlement_currency": "Currency",
    "snapshot": "Full update (possibly old) if true and otherwise an incremental update",
    "strategy_id": "Strategy identifier (optional)",
    "stream_id": "Stream identifier",
    "strike_currency": "Currency",
    "symbol": "Symbol",
    "time_in_force": "Time in force",
    "trade_id": "Trade identifier",
    "update_time_utc": "Updated timestamp (UTC)",
    "version": "Version number (strictly increasing, optional)"
  },
  "cpp": {
    "std/string_view": {
      "type": "std::string_view",
      "includes": [
        "<string_view>"
      ]
    },
    "std/string": {
      "type": "std::string",
      "includes": [
        "<string>"
      ]
    },
    "std/nanoseconds": {
      "type": "std::chrono::nanoseconds",
      "includes": [
        "<chrono>"
      ],
      "default": "{}",
      "class": [
        "chrono"
      ]
    },
    "std/microseconds": {
      "type": "std::chrono::microseconds",
      "includes": [
        "<chrono>"
      ],
      "default": "{}",
      "class": [
        "chrono"
      ]
    },
    "std/milliseconds": {
      "type": "std::chrono::milliseconds",
      "includes": [
        "<chrono>"
      ],
      "default": "{}",
      "class": [
        "chrono"
      ]
    },
    "std/seconds": {
      "type": "std::chrono::seconds",
      "includes": [
        "<chrono>"
      ],
      "default": "{}",
      "class": [
        "chrono"
      ]
    },
    "std/days": {
      "type": "std::chrono::days",
      "includes": [
        "<chrono>"
      ],
      "default": "{}",
      "class": [
        "chrono"
      ]
    },
    "std/year_month_day": {
      "type": "std::chrono::year_month_day",
      "includes": [
        "<chrono>"
      ],
      "default": "{}",
      "class": [
        "chrono"
      ]
    },
    "std/hh_mm_ss": {
      "type": "std::chrono::hh_mm_ss<std::chrono::milliseconds>",
      "includes": [
        "<chrono>"
      ],
      "default": "{}",
      "class": [
        "chrono"
      ]
    },
    "std/bool": {
      "type": "bool",
      "default": "false",
      "class": [
        "integral"
      ]
    },
    "std/char": {
      "type": "char",
      "default": "'\\0'",
      "class": [
        "integral"
      ]
    },
    "std/int8": {
      "type": "int8_t",
      "default": "{}",
      "class": [
        "integral",
        "signed"
      ]
    },
    "std/uint8": {
      "type": "uint8_t",
      "default": "{}",
      "class": [
        "integral",
        "unsigned"
      ]
    },
    "std/int16": {
      "type": "int16_t",
      "default": "{}",
      "class": [
        "integral",
        "signed"
      ]
    },
    "std/uint16": {
      "type": "uint16_t",
      "default": "{}",
      "class": [
        "integral",
        "unsigned"
      ]
    },
    "std/int32": {
      "type": "int32_t",
      "default": "{}",
      "class": [
        "integral",
        "signed"
      ]
    },
    "std/uint32": {
      "type": "uint32_t",
      "default": "{}",
      "class": [
        "integral",
        "unsigned"
      ]
    },
    "std/int64": {
      "type": "int64_t",
      "default": "{}",
      "class": [
        "integral",
        "signed"
      ]
    },
    "std/uint64": {
      "type": "uint64_t",
      "default": "{}",
      "class": [
        "integral",
        "unsigned"
      ]
    },
    "std/ssize_t": {
      "type": "ssize_t",
      "default": "{}",
      "class": [
        "integral",
        "signed"
      ]
    },
    "std/size_t": {
      "type": "size_t",
      "default": "{}",
      "class": [
        "integral",
        "unsigned"
      ]
    },
    "std/float": {
      "type": "float",
      "includes": [
        "<limits>"
      ],
      "default": "std::numeric_limits<float>::quiet_NaN()"
    },
    "std/double": {
      "type": "double",
      "includes": [
        "<limits>"
      ],
      "default": "std::numeric_limits<double>::quiet_NaN()"
    },
    "std/span": {
      "type": "std::span",
      "includes": [
        "<span>"
      ]
    },
    "std/vector": {
      "type": "std::vector",
      "includes": [
        "<vector>"
      ]
    }
  }
}
